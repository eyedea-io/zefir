#!/usr/bin/env node
import readPkg from 'read-pkg'
import writePkg from 'write-pkg'
import { resolve, join } from 'path'
import parseArgs from 'minimist'
import { exists, writeFile, mkdir } from 'mz/fs'
import mkdirp from 'mkdirp-then'

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help'
  },
  boolean: ['h']
})

if (argv.help) {
  console.log(`
    Description
      Scaffolds a simple project structure to get started quickly

    Usage
      $ zefir init <dir>

      If no directory is provided the current directory will be used.

    Options
      --help, -h      Displays this message
  `)

  process.exit(0)
}

const dir = resolve(argv._[0] || '.')

exists(dir)
.then(async present => {
  if (!present) {
    await mkdirp(dir)
  }

  let pkg
  try {
    pkg = await readPkg(dir)
  } catch (err) {
    await writeFile(join(dir, 'package.json'), basePackage)
    pkg = await readPkg(dir)
  }

  delete pkg._id
  delete pkg.readme

  pkg.scripts = Object.assign({}, (pkg.scripts || {}), {
    dev: 'zefir',
    build: 'zefir build',
    start: 'zefir start'
  })
  pkg.version = pkg.version || '0.1.0'

  await writePkg(dir, pkg)

  if (!await exists(join(dir, 'src'))) {
    await mkdir(join(dir, 'src'))
  }

  if (!await exists(join(dir, 'src', 'index.js'))) {
    await writeFile(join(dir, 'src', 'index.js'), basePage)
  }

  if (!await exists(join(dir, 'src', 'app.store.js'))) {
    await writeFile(join(dir, 'src', 'app.store.js'), baseStore)
  }

  if (!await exists(join(dir, 'src', 'app.service.js'))) {
    await writeFile(join(dir, 'src', 'app.service.js'), baseService)
  }
})
.catch((err) => {
  console.error(err)
  process.exit(1)
})

const basePackage = `{
  "name": "my-app"
}`

const basePage = `export default ({
  stores: {app: {fullName}},
  services: {app: {toggleName}}
}) => (
  <div className='page'>
    Hey: <b>{fullName}</b>
    <button onClick={toggleName}>Log</button>

    <style jsx>{\`
      .page {
        padding: 80px;
        font-family: Arial;
      }

      button {
        padding: 7px 14px;
        background: #0366d6;
        border-radius: 3px;
        border: none;
        color: #fff;
      }
    \`}</style>
  </div>
)
`

const baseStore = `import {observable} from 'mobx'

export default {
  @observable fullName: 'John Doe'
}`

const baseService = `import {action} from 'mobx'

export default class App {
  @action toggleName = () => {
    const {app} = this.stores

    app.fullName = app.fullName === 'John Doe' ? 'Jane Doe' : 'John Doe'
  }
}`
